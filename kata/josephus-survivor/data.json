{
  "id": "555624b601231dc7a400017a",
  "name": "Josephus Survivor",
  "slug": "josephus-survivor",
  "category": "algorithms",
  "publishedAt": "2015-05-15T16:54:14.456Z",
  "approvedAt": "2015-05-20T03:51:16.388Z",
  "languages": [
    "python",
    "javascript",
    "ruby",
    "java",
    "coffeescript",
    "haskell",
    "csharp",
    "elixir",
    "php",
    "go",
    "clojure",
    "typescript",
    "cpp",
    "crystal",
    "dart",
    "julia",
    "r",
    "reason",
    "factor",
    "elm",
    "objc",
    "lua",
    "fsharp",
    "swift",
    "rust",
    "forth",
    "groovy",
    "c",
    "kotlin",
    "nim",
    "scala",
    "racket",
    "purescript",
    "powershell",
    "fortran",
    "vb",
    "erlang",
    "shell",
    "nasm",
    "cfml",
    "prolog",
    "ocaml"
  ],
  "url": "https://www.codewars.com/kata/555624b601231dc7a400017a",
  "rank": {
    "id": -5,
    "name": "5 kyu",
    "color": "yellow"
  },
  "createdAt": "2015-05-15T16:54:16.574Z",
  "createdBy": {
    "username": "GiacomoSorbi",
    "url": "https://www.codewars.com/users/GiacomoSorbi"
  },
  "approvedBy": {
    "username": "dnolan",
    "url": "https://www.codewars.com/users/dnolan"
  },
  "description": "In this kata you have to correctly return who is the \"survivor\", ie: the last element of a <a href=\"http://www.codewars.com/kata/josephus-permutation/\" target=\"_blank\" title=\"Josephus sequence\">Josephus permutation</a>.\n\nBasically you have to assume that n people are put into a circle and that they are eliminated in steps of k elements, like this:\n\n```\njosephus_survivor(7,3) => means 7 people in a circle;\none every 3 is eliminated until one remains\n[1,2,3,4,5,6,7] - initial sequence\n[1,2,4,5,6,7] => 3 is counted out\n[1,2,4,5,7] => 6 is counted out\n[1,4,5,7] => 2 is counted out\n[1,4,5] => 7 is counted out\n[1,4] => 5 is counted out\n[4] => 1 counted out, 4 is the last element - the survivor!\n```\n\nThe above link about the \"base\" kata description will give you a more thorough insight about the origin of this kind of permutation, but basically that's all that there is to know to solve this kata.\n\n**Notes and tips:** using the solution to the other kata to check your function may be helpful, but as much larger numbers will be used, using an array/list to compute the number of the survivor may be too slow; you may assume that both n and k will always be >=1.",
  "totalAttempts": 31071,
  "totalCompleted": 5547,
  "totalStars": 493,
  "voteScore": 633,
  "tags": [
    "Algorithms",
    "Mathematics",
    "Logic",
    "Numbers",
    "Lists",
    "Data Structures",
    "Arrays",
    "Data Types"
  ],
  "contributorsWanted": true,
  "unresolved": {
    "issues": 3,
    "suggestions": 0
  }
}